version: 2
migrationScript: |-
  begin
    alter table secrets add column expires timestamp;
    update secrets set expires=now() + interval '1000 years';
    alter table secrets alter column expires set not null;
  end
methods:
  get_secret_with_expires:
    description: |-
      Get the single secret associated with a given secret name, or an empty result if no such secret exists.
      Note that this may include rows with an expiration in the past, as rows are only deleted occasionally.
    mode: read
    serviceName: secrets
    args: name text
    returns: table (secret text, expires timestamp)
    body: |-
      begin
        return query select secrets.secret, secrets.expires from secrets where secrets.name = get_secret_with_expires.name;
      end
  list_secrets_with_expires:
    description: |-
      List the names and expiration dates of all secrets.
      Note that this may include rows with an expiration in the past, as rows are only deleted occasionally.
    mode: read
    serviceName: secrets
    args: ''
    returns: table (name text, expires timestamp)
    body: |-
      begin
        return query select secrets.name as name, secrets.expires as expires from secrets;
      end
  remove_secret:
    description: |-
      Delete the secret associated with some key.
    mode: write
    serviceName: secrets
    args: name text
    returns: void
    body: |-
      begin
        delete from secrets where secrets.name = remove_secret.name;
      end
  set_secret:
    description: |-
      Set the secret associated with the given name.
      If the secret already exists, it is updated instead.
    mode: write
    serviceName: secrets
    args: name text, secret text
    returns: void
    deprecated: true
    body: |-
      begin
        insert into secrets values (set_secret.name, set_secret.secret, now() + interval '1000 years')
        on conflict (name) do
        update set secret=EXCLUDED.secret, expires=now() + interval '1000 years';
      end
  set_secret_with_expires:
    description: |-
      Set the secret associated with the given name.
      If the secret already exists, it is updated instead.
    mode: write
    serviceName: secrets
    args: name text, secret text, expires timestamp
    returns: void
    body: |-
      begin
        insert into secrets values (
          set_secret_with_expires.name,
          set_secret_with_expires.secret,
          set_secret_with_expires.expires
        )
        on conflict on constraint secrets_pkey do
          update set secret=EXCLUDED.secret, expires=EXCLUDED.expires;
      end
