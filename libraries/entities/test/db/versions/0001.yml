version: 1
migrationScript: |-
  begin
    create extension pgcrypto;
    create table test_entities(partition_key text, row_key text, value jsonb not null, version integer not null, etag uuid default public.gen_random_uuid());
    alter table test_entities add primary key (partition_key, row_key);
  end
methods:
  test_entities_load:
    description: test
    mode: read
    serviceName: test-entities
    args: partition_key text, row_key text
    returns: table (partition_key_out text, row_key_out text, value jsonb, version integer, etag uuid)
    body: |-
      begin
        return query
        select test_entities.partition_key, test_entities.row_key, test_entities.value, test_entities.version,
        test_entities.etag from test_entities
        where test_entities.partition_key = test_entities_load.partition_key and test_entities.row_key = test_entities_load.row_key;
      end
  test_entities_create:
    serviceName: test-entities
    description: test
    mode: write
    args: pk text, rk text, properties jsonb, overwrite boolean, version integer
    returns: uuid
    body: |-
      declare
        new_etag uuid := public.gen_random_uuid();
      begin
        if overwrite then
          insert into test_entities(partition_key, row_key, value, version, etag)
          values (
            pk,
            rk,
            properties,
            version,
            new_etag
          ) on conflict (partition_key, row_key) do
          update
          set (value, version, etag) = (properties, test_entities_create.version, new_etag)
          where test_entities.partition_key = test_entities_create.pk and test_entities.row_key = test_entities_create.rk;
        else
          insert into test_entities(partition_key, row_key, value, version, etag)
          values (
            pk,
            rk,
            properties,
            version,
            new_etag
          );
        end if;
        return new_etag;
      end
  test_entities_remove:
    serviceName: test-entities
    description: test
    mode: write
    args: partition_key text, row_key text
    returns: table (etag uuid)
    body: |-
      begin
        return query delete from test_entities
        where test_entities.partition_key = test_entities_remove.partition_key and test_entities.row_key = test_entities_remove.row_key
        returning test_entities.etag;
      end
  test_entities_modify:
    serviceName: test-entities
    description: test
    mode: write
    args: partition_key text, row_key text, properties jsonb, version integer
    returns: void
    body: |-
      begin
        update test_entities
        set (value, version, etag) = (properties, test_entities_modify.version, public.gen_random_uuid())
        where test_entities.partition_key = test_entities_modify.partition_key and test_entities.row_key = test_entities_modify.row_key;
      end
  test_entities_scan:
    description: test
    mode: read
    serviceName: test-entities
    args: condition text, size integer, page integer
    returns: table (partition_key text, row_key text, value jsonb, version integer, etag uuid)
    body: |-
      declare
        sql text := 'select test_entities.partition_key, test_entities.row_key, test_entities.value, test_entities.version, test_entities.etag from test_entities';
        page_offset integer;
      begin
        if condition is not null then
          sql := sql || ' where ' || condition;
        end if;

        if size is not null and size > 0 then
          sql := sql || ' limit ' || size;

          if page is not null and page > 0 then
            page_offset := size * (page - 1);
            sql := sql || ' offset ' || page_offset;
          end if;
        end if;

        return query execute sql;
      end
